<?php

namespace jarekkozak\dict;

use jarekkozak\tests\dict\EnumMock;
use jarekkozak\tests\dict\EnumMock1;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-25 at 15:14:07.
 */
class EnumTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Enum
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jarekkozak\dict\Enum::values
     * @todo   Implement testValues().
     */
    public function testValues()
    {
        $this->assertCount(3,  EnumMock::values());
        $this->assertCount(4,  EnumMock1::values());
    }

    /**
     * @covers jarekkozak\dict\Enum::isValid
     */
    public function testIsValid()
    {
        $this->assertTrue(EnumMock::isValid(1));
        $this->assertTrue(EnumMock::isValid(2));
        $this->assertFalse(EnumMock::isValid('1'));
        $this->assertFalse(EnumMock::isValid(3));

        $this->assertTrue(EnumMock1::isValid('1'));
        $this->assertTrue(EnumMock1::isValid('2'));
        $this->assertFalse(EnumMock1::isValid(1));
        $this->assertFalse(EnumMock1::isValid('3'));
    }

    /**
     * @covers jarekkozak\dict\Enum::name
     */
    public function testName()
    {
        $this->assertEquals('A',EnumMock::name(1));
        $this->assertEquals(FALSE,EnumMock::name('1'));
        $this->assertEquals('C1',EnumMock1::name('3'));
        $this->assertEquals(FALSE,EnumMock1::name(3));
    }

    /**
     * @covers jarekkozak\dict\Enum::value
     */
    public function testValue()
    {
        $this->assertEquals(1,EnumMock::value('A'));
        $this->assertEquals(NULL,EnumMock::value('A1'));
    }

    public function testEnumName(){
        $this->assertEquals('jarekkozak\tests\dict\EnumMock', EnumMock::enumName());
    }

    public function testGetInstance(){
        $this->assertInstanceOf('jarekkozak\tests\dict\EnumMock', EnumMock::getInstance());
        $this->assertInstanceOf('jarekkozak\tests\dict\EnumMock1', EnumMock1::getInstance());
    }
}