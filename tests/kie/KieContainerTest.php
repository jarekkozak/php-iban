<?php

namespace jarekkozak\kie;

use jarekkozak\kie\converters\KieMomentConverter;
use jarekkozak\kie\heartbeat\KieHBRequest;
use Moment\Moment;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-06 at 08:31:00.
 */
class KieContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var KieContainer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jarekkozak\kie\KieContainer::getContainerInfo
     * @todo   Implement testGetContainerInfo().
     */
    public function testGetContainerInfo()
    {
        $client = new KieClient([
            'context' => 'http://localhost:8081/kie-server',
            'username' => 'kiesrv',
            'password' => 'kiesrv',
        ]);
        $container = new KieContainer([
            'client' => $client,
            'container'=>'containers/perdiem'
        ]);
        $info = $container->getContainerInfo();
    }

    public function testExecute(){
        $client = new KieClient([
            'context' => 'http://localhost:8081/kie-server',
            'username' => 'kiesrv',
            'password' => 'kiesrv',
        ]);
        $container = new KieContainer([
            'client' => $client,
            'container'=>'containers/perdiem'

        ]);
///
        $batch = new KieBatch(['lookup'=>'ksession']);
        $converter = new KieMomentConverter();
        $config = ['factName' => 'trimetis.perdiem.Request','nodes' => [
                'message',
                'start' => [
                    'name' => 'start',
                    'converter' => $converter,
                ],
                'time' => [
                    'converter' => $converter,
                ]
            ],
        ];

        $request          = new KieHBRequest();
        $request->message = 'Test Message';
        $request->start   = new Moment('2015-01-01T12:34:00');
        $request->time    = new Moment('2015-01-02T12:34:00');

        $config['object']=$request;
        $config['identifier']='request1';

        $reqFact1 = new KieFact($config);


        $batch->addFact($reqFact1);

        $batch->addQuery(new KieQuery([
            'name'=>'getResponse',
            'identifier'=>'response'
        ]));

///
        $res = $container->execute($batch);
        $this->assertTrue($res);
        $results = $container->getResults();
        $this->assertCount(2, $results);

    }
}