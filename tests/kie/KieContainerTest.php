<?php

namespace jarekkozak\kie;

use jarekkozak\kie\converters\KieMomentConverter;
use jarekkozak\kie\heartbeat\KieHBRequest;
use Moment\Moment;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-06 at 08:31:00.
 */
class KieContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var KieContainer
     */
    protected $object;
    protected $property;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->property = new \jarekkozak\sys\PropertiesFile([
            'filename' => '$HOME/.secret/kiesrv-secret'
        ]);
        if ($this->property->getProperty('kie-server') == NULL) {
            echo 'Property file does not exist:';
            echo 'With content:';
            echo 'kie-server=exchange_address_with_context';
            echo 'kie-user=username or email';
            echo 'kie-password=password';
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Creates KIE client
     * @return \jarekkozak\kie\KieClient
     */
    public function getClient()
    {
        $client = new KieClient([
            'serverContext' => $this->property->getProperty('kie-server'),
            'username' => $this->property->getProperty('kie-user'),
            'password' => $this->property->getProperty('kie-password'),
        ]);
        return $client;
    }

    /**
     * Creates KIE project
     * @return \jarekkozak\kie\KieClient
     */
    public function getProject()
    {
        $project = new KieProject([
            'container_id' => 'heartbeat',
            'group_id' => 'trimetis',
            'artifact_id' => 'heartbeat',
            'version' => '1.0',
            'client'=>$this->getClient()
        ]);
        return $project;
    }

    /**
     * @covers jarekkozak\kie\KieContainer::getContainerInfo
     */
    public function testGetContainerInfo()
    {
        $client    = $this->getClient();
        $container = new KieContainer([
            'client' => $client,
            'container' => 'heartbeat'
        ]);
        $info      = $container->getContainerInfo();
    }

    /**
     * @covers jarekkozak\kie\KieContainer::getContainerInfo
     */
    public function testStartContainer()
    {
        $client  = $this->getClient();
        $project = $this->getProject();
        $project->disposeProject();

        $container = new KieContainer([
            'client' => $client,
            'container' => 'heartbeat',
            'kieProject' => $this->getProject()
        ]);
        self::assertFalse($container->getContainerInfo());
        self::assertTrue($container->startContainer());

        $exp = [
            '@attributes' => [
                'container-id' => 'heartbeat',
                'status' => 'STARTED'
            ],
            'release-id' => [
                'artifact-id' => 'heartbeat',
                'group-id' => 'trimetis',
                'version' => '1.0'
            ],
            'resolved-release-id' => [
                'artifact-id' => 'heartbeat',
                'group-id' => 'trimetis',
                'version' => '1.0'
            ],
            'scanner' => [
                '@attributes' => [
                    'status' => 'DISPOSED'
                ]
            ]
        ];
        self::assertEquals($exp,$container->getContainerInfo());
    }

    /**
     * @covers jarekkozak\kie\KieContainer::execute
     */
    public function testExecute()
    {
        $client    = $this->getClient();
        $container = new KieContainer([
            'client' => $client,
            'container' => 'heartbeat'
        ]);
///
        $batch     = new KieBatch(['lookup' => 'ksession']);
        $converter = new KieMomentConverter();
        $config    = ['factName' => 'trimetis.heartbeat.Request', 'nodes' => [
                'message',
                'start' => [
                    'name' => 'start',
                    'converter' => $converter,
                ],
                'time' => [
                    'converter' => $converter,
                ]
            ],
        ];

        $request          = new KieHBRequest();
        $request->message = 'Test Message';
        $request->start   = new Moment('2015-01-01T12:34:00');
        $request->time    = new Moment('2015-01-02T12:34:00');

        $config['identifier'] = 'request1';

        $reqFact1 = new KieFact($request, $config);


        $batch->addFact($reqFact1);

        $batch->addQuery(new KieQuery([
            'name' => 'getResponse',
            'identifier' => 'response'
        ]));
///
        $res     = $container->execute($batch);
        self::assertTrue($res);
        $results = $container->getResults();
        self::assertCount(2, $results);
    }
}