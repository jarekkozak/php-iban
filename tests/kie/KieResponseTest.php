<?php

namespace jarekkozak\kie;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-06 at 06:24:31.
 */
class KieResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var KieResponse
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $body = simplexml_load_string('<response type="SUCCESS" msg="Kie Server info"><kie-server-info><version>6.2.0.Final</version></kie-server-info></response>');
        $this->object  = new KieResponse(['body'=>$body]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jarekkozak\kie\KieResponse::init
     */
    public function testInit()
    {
        $body = simplexml_load_string('<response type="SUCCESS" msg="Kie Server info"><kie-server-info><version>6.2.0.Final</version></kie-server-info></response>');
        $response  = new KieResponse(['body'=>$body]);
        $this->assertEquals('SUCCESS', $response->getType());
        $this->assertEquals('Kie Server info', $response->getMsg());
        $this->assertTrue($response->isSuccess());
    }

    /**
     * @covers jarekkozak\kie\KieResponse::init
     */
    public function testInitFail()
    {
        $body = simplexml_load_string('<response msg="Kie Server info"><kie-server-info><version>6.2.0.Final</version></kie-server-info></response>');
        $response  = new KieResponse(['body'=>$body]);
        $this->assertFalse($response->isSuccess());
        $this->assertNull($response->getType());
        $this->assertNull($response->getMsg());
    }

    /**
     * @covers jarekkozak\kie\KieResponse::init
     */
    public function testInitFail2()
    {
        $response  = new KieResponse();
        $this->assertFalse($response->isSuccess());
        $this->assertNull($response->getType());
        $this->assertNull($response->getMsg());
    }


    /**
     * @covers jarekkozak\kie\KieResponse::isSuccess
     */
    public function testIsSuccess()
    {
        $this->assertTrue($this->object->isSuccess());
    }

    /**
     * @covers jarekkozak\kie\KieResponse::getMsg
     */
    public function testGetMsg()
    {
        $this->assertEquals('Kie Server info', $this->object->getMsg());
    }

    public function testContainerData(){
        $data = <<<XML
            <response type="SUCCESS" msg="Info for container perdiem">
            <kie-container container-id="perdiem" status="STARTED">
            <release-id>
            <artifact-id>perdiem</artifact-id>
            <group-id>trimetis</group-id>
            <version>4.9</version>
            </release-id>
            <resolved-release-id>
            <artifact-id>perdiem</artifact-id>
            <group-id>trimetis</group-id>
            <version>4.9</version>
            </resolved-release-id>
            <scanner status="DISPOSED"/>
            </kie-container>
            </response>
XML;
        $body = simplexml_load_string($data);

        $response = new KieResponse(['body'=>$body]);

        $data = $response->getData();

        $release = [
            'artifact-id'=>'perdiem',
            'group-id'=>'trimetis',
            'version'=>'4.9'
        ];

        $this->assertEquals($release,$data['kie-container']['release-id']);


    }

}