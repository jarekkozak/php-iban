<?php

namespace jarekkozak\kie;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-11 at 06:22:32.
 */
class KieProjectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var KieProject
     */
    protected $object;
    protected $property;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->property = new \jarekkozak\sys\PropertiesFile([
            'filename' => '$HOME/.secret/kiesrv-secret'
        ]);
        if ($this->property->getProperty('kie-server') == NULL) {
            echo 'Property file does not exist:';
            echo 'With content:';
            echo 'kie-server=exchange_address_with_context';
            echo 'kie-user=username or email';
            echo 'kie-password=password';
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jarekkozak\kie\KieProject::toXml
     */
    public function testToXml()
    {
        $project = new KieProject([
            'container_id' => 'heartbeat',
            'group_id' => 'eu.trimetis',
            'artifact_id' => 'heartbeat',
            'version' => 'LATEST',
        ]);

        $a = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<kie-container><container-id>heartbeat</container-id><status/><release-id><group-id>eu.trimetis</group-id><artifact-id>heartbeat</artifact-id><version>LATEST</version></release-id><resolved-release-id/></kie-container>

XML;
        $this->assertEquals($a, $project->toXml());
    }

    /**
     * @covers jarekkozak\kie\KieProject::scanProject
     */
    public function testScanProject()
    {
        $project = new KieProject([
            'container_id' => 'heartbeat',
            'group_id' => 'trimetis',
            'artifact_id' => 'heartbeat',
            'version' => '1.0',
            'client'=> $this->getClient()
        ]);

        $info = $project->scanProject();
    }
 /**
     * Creates KIE client
     * @return \jarekkozak\kie\KieClient
     */
    public function getClient()
    {
        $client = new KieClient([
            'serverContext' => $this->property->getProperty('kie-server'),
            'username' => $this->property->getProperty('kie-user'),
            'password' => $this->property->getProperty('kie-password'),
        ]);
        return $client;
    }

}