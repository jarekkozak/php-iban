<?php

namespace jarekkozak\util;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-20 at 11:09:33.
 */
class CurrencyCodeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CurrencyCode
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CurrencyCode;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers jarekkozak\util\CurrencyCode::downloadISOCodes
     */
    public function testDownloadISOCodes()
    {
        $a = $this->object->downloadISOCodes();
        self::assertCount(5, $a);
        self::assertTrue(isset($a["country"]["POLAND"]));
        $poland = $a["country"]["POLAND"];
        self::assertEquals('PLN',$poland['currency']);
        self::assertEquals(985,$poland['code']);
        self::assertEquals('Zloty',$poland['name']);
        self::assertEquals(2,$poland['minor_unit']);

        //Currency

        $currency = $a["currency"];
        self::assertEquals('Euro',$currency['EUR']['name']);

    }

    /**
     * @covers jarekkozak\util\CurrencyCode::getIsoCode
     */
    public function testGetIsoCode()
    {
        self::assertEquals(985, $this->object->getIsoCode('PLN'));
        self::assertEquals(840, $this->object->getIsoCode('USD'));
        self::assertEquals(978, $this->object->getIsoCode('EUR'));
        self::assertEquals(FALSE, $this->object->getIsoCode('@@@'));
    }

    /**
     * @covers jarekkozak\util\CurrencyCode::getIsoCurrency
     */
    public function testGetIsoCurrency()
    {
        self::assertEquals('PLN', $this->object->getIsoCurrency(985));
        self::assertEquals('USD', $this->object->getIsoCurrency(840));
        self::assertEquals('EUR', $this->object->getIsoCurrency(978));
        self::assertEquals(FALSE, $this->object->getIsoCurrency(8978));
    }


    public function testOutList(){


        $a = $this->object->downloadISOCodes();
        $b = $a['currency'];
        foreach ($this->object->str2code as $key => $value) {
            $name = $b[$key]['name'];
            //echo "\$this->insert('{{%currency}}',['currency'=>'$key','currency_code'=>'$value','name'=>'$name','created_at'=>1,'updated_at'=>1]);\n";
        }
//        self::assertCount(5, $a);
//        self::assertTrue(isset($a["country"]["POLAND"]));
//        $poland = $a["country"]["POLAND"];
//        self::assertEquals('PLN',$poland['currency']);
//        self::assertEquals(985,$poland['code']);
//        self::assertEquals('Zloty',$poland['name']);
//        self::assertEquals(2,$poland['minor_unit']);

    }

}